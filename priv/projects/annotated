#-*-conf-*-

####################################################################
#
# This is an annotated Guild project file. Review the comments below
# and modify the attributes as needed for your project. Feel free to
# delete comments as you become familiar with the project structure.
#
# For a complete project reference, see:
#
#   https://guild.ai/project-reference/
#
####################################################################

[var "name"]

help            = Project name (defaults to project directory name)
default         = {{project_dir}}

[var "train"]

help            = Train command

[project]

# A sample annotated project

# Each Guild project has a project section that provides information
# about the project.

# The project name is used whenever the project is displayed --
# e.g. in the view title.
#
name                    = {{name|default:project_dir}}

# Some Guild operations like train create runs, which are stored in a
# run root directory. By default Guild creates a "runs" project
# subdirectory. You can specify an alternative run root here.
#
runroot                 = runs

####################################################################

[model]

# Model sections provide information about a model to be
# trained. Guild projects may contain multiple model sections. To
# differentiate model sections from one another, provide quoted model
# names in the section headers (see "mnist" example below). This model
# is considerd the default model.

# You may provide a short (one line) description of the model. This is
# particularly useful if you define more than one model.
#
description = Default model

# The train command spec is used to train a model. This should be the
# name of the Python module that handles training. Flags that
# correspond to the model, that have been selected by the user with
# the '--profile' option, and that have been specified with '-F,
# --flag' options are automatically added to this command for the
# train operation.
#
# To see the command that Guild will use for the train operation,
# including all flags, use the '--preview' option for the train
# command.
#
train                   = {{train|warn_if_empty:"train command not set - edit the project and specify this value before training"}}

# If a model requires a long preparatory phase -- commonly used for
# downloading and preparing data for training -- you may define a
# prepare spec. The same conventions are used for prepare as for
# train (see above).
#
prepare                 =

# If your model requires files to train (e.g. files created during the
# prepare operation) you can define them as a comma separated list as
# train_requires. Paths are evaluated relative to the project
# directory (i.e. the directory containing this file).
#
train_requires          =

# If your model is evaluated using a separate command, you can define
# an evaluate operation. The same conventions are used for evaluate as
# for train (see above).
#
evaluate                =

# If your model supports serving you can define the serve command.
#
serve                   =

####################################################################

# [model "mnist"]
#
## Example of a second, named model
##
## If your project supports multiple models or model configurations
## (e.g. a model training script that uses multiple GPUs) you can
## uncomment this section and provide the alternate details below.
#
# train                 =
# prepare               =
# train_requires        =
# evaluate              =

####################################################################

[flags]

# Flag sections define the flags associated with a model. Flag
# sections are associated with models using their names. This section
# corresponds to the default model. To define flags for a named model,
# use the quoted corresponding name in the flags section (see "mnist"
# example below).
#
# Flags are automatically passed to operation commands in the form:
#
#   --NAME=VALUE
#
# If a flag doesn't have a value it's passed as a flag:
#
#   --NAME
#
# The default flags section applies to all models regardless of
# whether they're named. Named flags section that correspond to the
# model can provide additional flags or redefine default values.
#
# Users may additionally add or redefine flags using '-F, --flag'
# options for an operation.
#
# Flags may use operation environment variables as needed. Common
# environment variables include:
#
#  RUNDIR      the directory created for the run (applies to
#              train, evaluate, and serve operations)
#  GPU_COUNT   the number of GPUs detected on the system

# You may provide an optional description attribute. Use this to
# describe the set of flags - it will not be passed through as a
# command line option.
#
description = Default flags

data_dir                = data
train_dir               = $RUNDIR/train
batch_size              = 128
max_steps               = 1000

####################################################################

[flags "quick"]

# Named flag sections may be used as profiles for an operation. In
# this example, the section defines a relatively smaller number of
# steps to train on. You would invoke this profile for training using
# the '--profile' option:
#
#   guild train --profile quick
#
# Flags defined in named sections are applied in addition to default
# flags (see above) -- i.e. new flags are added and existing flags are
# redefined.
#
# Profiles can be used any operation that supports flags.

description = Train with fewer steps

max_steps               = 100

####################################################################

[flags "long"]

description = Train with more steps

max_steps               = 10000

####################################################################

[view]

# View sections are used to define what is displayed in Guild view for
# a model. Like flag sections view sections may be named to associate
# them with models.

fields                  =
series                  =
