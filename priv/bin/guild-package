#!/bin/bash -eu

set -o pipefail

if [ ! -z "${DEBUG:-}" ]; then
    set -x
fi

realpath() {
    if [ "$(uname -s)" = "Darwin" ]; then
        perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"
    else
        readlink -f "$1"
    fi
}

project="$(realpath $1)"
srcdir="$(realpath ${ALT_SRCDIR:-$project/src})"
pkgdir="$project/pkg"

###################################################################
# Helpers
###################################################################

error() {
    echo $1
    exit 2
}

dir-empty() {
    local dir=$1
    [ -z "$(ls -A $dir)" ]
}

url-filename() {
    echo ${1##*/}
}

url-rootname() {
    local filename
    filename=$(url-filename $1)
    echo ${filename%%.*}
}

pushd-quiet() {
    pushd $1 > /dev/null
}

popd-quiet() {
    popd > /dev/null
}

github-repo-base() {
    expr match "$1" '\(https://github.com/[^/]*/[^/]*\)'
}

github-treeish() {
    expr match "$1" 'https://github.com/[^/]*/[^/]*/tree/\([^/]*\)'
}

github-path() {
    expr match "$1" 'https://github.com/[^/]*/[^/]*/tree/[^/]*/\(.*\)'
}

###################################################################
# Packager
###################################################################

try-packager-init() {
    local packager=${package_packager:-}
    if [ -f "$packager" ]; then
        echo "Using $packager"
        source "$project/packager"
    fi
}

packager-call() {
    local name=$1
    local default=${2:-}
    if type -t $name > /dev/null; then
        echo "Running $name"
        pushd-quiet "$srcdir"
        eval $name
        popd-quiet
    elif [ ! -z $default ]; then
        eval $default
    fi
}

###################################################################
# Sources
###################################################################

maybe-sources() {
    if [ -z "${SKIP_SOURCES:-}" ]; then
        srcdir-init
        sources-download
        sources-check
        sources-extract
        sources-prepare
    else
        echo "Skipping sources"
    fi
}

srcdir-init() {
    if [ ! -z "${CLEAN:-}" ]; then
        echo "Cleaning sources"
        rm -rf "$srcdir"
    fi
    mkdir -p "$srcdir"
}

#------------------------------------------------------------------
# Download
#------------------------------------------------------------------

sources-download() {
    for src in $package_source; do
        source-download "$src"
    done
}

source-download() {
    local src=$1
    if [ -f "$src" ]; then
        true
    elif [ "${src:0:18}" = "https://github.com" ]; then
        github-download "${src}"
    elif [[ "$src" =~ ^(https|http|ftp):// ]]; then
         curl-download "${src}"
    else
        error "package source '$src' does not exist"
    fi
}

github-download() {
    local url=$1
    local repo_base=$(github-repo-base $url)
    if [ -z "$repo_base" ]; then
        error "$url is not a supported GitHub path"
    fi
    local repo_src=${repo_base}.git
    local repo_name=$(url-rootname $repo_src)
    local repo_dest=$project/$repo_name

    echo "Downloading $repo_src"
    if [ ! -e "$repo_dest" ] || dir-empty "$repo_dest"; then
        git clone --mirror "$repo_src" "$repo_dest"
    else
        pushd-quiet "$repo_dest"
        git fetch --all -p
        popd-quiet
    fi
}

curl-download() {
    local url=$1
    local filename=$(url-filename "$url")
    local dest="$project/$filename"
    if [ ! -e "$dest" ]; then
        echo "Downloading $url"
        curl -Lf -o "$dest" "$url"
    fi
}

#------------------------------------------------------------------
# Check
#------------------------------------------------------------------

sources-check() {
    # TODO
    #
    # This is a place holder for an important feature - enough to stub
    # out. The user should be able to specify checksums to apply to
    # source artifacts.
    true
}

#------------------------------------------------------------------
# Extract
#------------------------------------------------------------------

sources-extract() {
    for src in $package_source; do
        source-extract "$src"
    done
}

source-extract() {
    local src=$1
    if [ -f "$src" ]; then
        file-source-copy "$src"
    elif [ "${src:0:18}" = "https://github.com" ]; then
        github-source-extract "${src}"
    elif [[ "$src" =~ ^(https|http|ftp):// ]]; then
        downloaded-file-extract "${src}"
    else
        error "$src is not a supported source type"
    fi
}

github-source-extract() {
    local url=$1
    local repo_base=$(github-repo-base $url)
    if [ -z "$repo_base" ]; then
        error "$url is not a supported GitHub path"
    fi
    local repo_name=$(url-rootname $repo_base)
    local treeish=$(github-treeish $url)
    treeish=${treeish:-master}
    local path=$(github-path $url)

    if [ -z "$path" ]; then
        echo "Extracting $repo_name/$treeish"
        git -C $repo_name archive $treeish \
            | tar -C "$srcdir" -xf -
    else
        echo "Extracting $repo_name/$treeish/$path"
        git -C $repo_name archive --prefix="$path/" $treeish:$path \
            | tar -C "$srcdir" -xf -
    fi
}

downloaded-file-extract() {
    local url=$1
    local filename=$(url-filename "$url")
    local file="$project/$filename"
    if [[ "$file" = *.tar.* ]]; then
        tar-source-extract "$file"
    elif [[ "$file" = *.zip ]]; then
            zip-source-extract "$file"
    else
        file-source-copy "$file"
    fi
}

tar-source-extract() {
    local archive=$1
    echo "Unpacking $(basename $archive)"
    tar -C "$srcdir" -xf "$archive"
}

zip-source-extract() {
    local archive=$1
    echo "Unpacking $(basename $archive)"
    unzip -qo -d "$srcdir" "$archive"
}

file-source-copy() {
    local file=$1
    echo "Copying source $file"
    cp "$file" "$srcdir/"
}

#------------------------------------------------------------------
# Extract
#------------------------------------------------------------------

sources-prepare() {
    if [ -z "${SKIP_SOURCES:-}" ]; then
        packager-call prepare
    fi
}

###################################################################
# Package
###################################################################

maybe-package() {
    if [ -z "${SKIP_PACKAGE:-}" ]; then
        pkgdir-init
        packager-call build
        packager-call package default-package
        package-finalize
    else
        echo "Skipping package"
    fi
}

pkgdir-init() {
    if [ -e "$pkgdir" ]; then
        echo "Removing package directory $pkgdir"
        rm -rf "$pkgdir"
    fi
    mkdir -p "$pkgdir"
}

default-package() {
    echo "Copying sources to package"
    cp -a "$srcdir"/* "$pkgdir/"
}

package-finalize() {
    cp "$project/GuildPkg" "$pkgdir/.GuildPkg"
}

###################################################################
# Archive
###################################################################

maybe-archive() {
    if [ -z "${SKIP_PACKAGE:-}" ] && [ -z "${SKIP_ARCHIVE:-}" ]; then
        package-archive
    else
        echo "Skipping archive"
    fi
}

package-archive() {
    local pkg="$package_name-$package_version.pkg.tar.xz"
    echo "Creating $pkg"
    tar -C "$pkgdir" -cjf "$pkg" .
}

###################################################################
# Main
###################################################################

try-packager-init
maybe-sources
maybe-package
maybe-archive
